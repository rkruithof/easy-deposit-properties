{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"easy-deposit-properties \u00b6 SYNOPSIS \u00b6 easy-deposit-properties load-props [--doUpdate] <properties-file> easy-deposit-properties run-service DESCRIPTION \u00b6 Service for keeping track of the deposit properties ARGUMENTS \u00b6 Options: -h, --help Show help message -v, --version Show version of this program Subcommand: load-props - Load a deposit.properties file and import it in the backend repository. --doUpdate Without this argument the properties are not imported, the default is a test mode that logs the intended changes -h, --help Show help message trailing arguments: <properties-file> (required) The deposit.properties file to be read. --- Subcommand: run-service - Starts EASY Deposit Properties as a daemon that services HTTP requests -h, --help Show help message --- EXAMPLES \u00b6 easy-deposit-properties load-props <properties-file> easy-deposit-properties run-service GRAPHQL INTERFACE \u00b6 build easy-deposit-properties using mvn clean install make sure the dans-dev-tools are installed properly call run-reset-env.sh from the root of the project call run-service.sh from the root of the project in your browser, go to http://localhost:20200/graphiql GRAPHIQL TOOLS \u00b6 To interact with the GraphQL servlet, use the internal http://localhost:20200/graphiql interface. Alternatively, on Mac, use the GraphiQL.app . GRAPHQL SCHEMA \u00b6 To generate the latest version of the GraphQL schema for easy-deposit-properties : #install get-graphql-schema npm install -g get-graphql-schema # (re)start the service (after: mvn clean install -DskipTests=true): see GRAPHQL INTERFACE above get-graphql-schema http://<base-url>/graphql > docs/schema.graphql INSTALLATION AND CONFIGURATION \u00b6 Unzip the tarball to a directory of your choice, typically /usr/local/ A new directory called easy-deposit-properties- will be created Add the command script to your PATH environment variable by creating a symbolic link to it from a directory that is on the path, e.g. ln -s /usr/local/easy-deposit-properties-<version>/bin/easy-deposit-properties /usr/bin General configuration settings can be set in cfg/application.properties and logging can be configured in cfg/logback.xml . The available settings are explained in comments in aforementioned files. BUILDING FROM SOURCE \u00b6 Prerequisites: Java 8 or higher Maven 3.3.3 or higher Steps: git clone https://github.com/DANS-KNAW/easy-deposit-properties.git cd easy-deposit-properties mvn install","title":"Manual"},{"location":"#easy-deposit-properties","text":"","title":"easy-deposit-properties"},{"location":"#synopsis","text":"easy-deposit-properties load-props [--doUpdate] <properties-file> easy-deposit-properties run-service","title":"SYNOPSIS"},{"location":"#description","text":"Service for keeping track of the deposit properties","title":"DESCRIPTION"},{"location":"#arguments","text":"Options: -h, --help Show help message -v, --version Show version of this program Subcommand: load-props - Load a deposit.properties file and import it in the backend repository. --doUpdate Without this argument the properties are not imported, the default is a test mode that logs the intended changes -h, --help Show help message trailing arguments: <properties-file> (required) The deposit.properties file to be read. --- Subcommand: run-service - Starts EASY Deposit Properties as a daemon that services HTTP requests -h, --help Show help message ---","title":"ARGUMENTS"},{"location":"#examples","text":"easy-deposit-properties load-props <properties-file> easy-deposit-properties run-service","title":"EXAMPLES"},{"location":"#graphql-interface","text":"build easy-deposit-properties using mvn clean install make sure the dans-dev-tools are installed properly call run-reset-env.sh from the root of the project call run-service.sh from the root of the project in your browser, go to http://localhost:20200/graphiql","title":"GRAPHQL INTERFACE"},{"location":"#graphiql-tools","text":"To interact with the GraphQL servlet, use the internal http://localhost:20200/graphiql interface. Alternatively, on Mac, use the GraphiQL.app .","title":"GRAPHIQL TOOLS"},{"location":"#graphql-schema","text":"To generate the latest version of the GraphQL schema for easy-deposit-properties : #install get-graphql-schema npm install -g get-graphql-schema # (re)start the service (after: mvn clean install -DskipTests=true): see GRAPHQL INTERFACE above get-graphql-schema http://<base-url>/graphql > docs/schema.graphql","title":"GRAPHQL SCHEMA"},{"location":"#installation-and-configuration","text":"Unzip the tarball to a directory of your choice, typically /usr/local/ A new directory called easy-deposit-properties- will be created Add the command script to your PATH environment variable by creating a symbolic link to it from a directory that is on the path, e.g. ln -s /usr/local/easy-deposit-properties-<version>/bin/easy-deposit-properties /usr/bin General configuration settings can be set in cfg/application.properties and logging can be configured in cfg/logback.xml . The available settings are explained in comments in aforementioned files.","title":"INSTALLATION AND CONFIGURATION"},{"location":"#building-from-source","text":"Prerequisites: Java 8 or higher Maven 3.3.3 or higher Steps: git clone https://github.com/DANS-KNAW/easy-deposit-properties.git cd easy-deposit-properties mvn install","title":"BUILDING FROM SOURCE"}]}